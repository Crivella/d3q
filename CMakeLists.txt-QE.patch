diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6c5275cd6..012cd097e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,7 +13,7 @@ cmake_minimum_required(VERSION 3.14 FATAL_ERROR)
 set(CMAKE_POLICY_DEFAULT_CMP0048 NEW)
 
 project(qe
-    VERSION 6.7.1
+    VERSION 6.8
     DESCRIPTION "ESPRESSO: opEn-Source Package for Research in Electronic Structure, Simulation, and Optimization"
     LANGUAGES Fortran C)
 
@@ -32,10 +32,10 @@ endif()
 # Define the paths for static libraries and executables
 ##########################################################
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${qe_BINARY_DIR}/lib 
-    CACHE 
+    CACHE
     PATH "Single output directory for building all libraries.")
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${qe_BINARY_DIR}/bin 
-    CACHE 
+    CACHE
     PATH "Single output directory for building all executables.")
 
 ###########################################################
@@ -64,6 +64,9 @@ include(GNUInstallDirs)
 ###########################################################
 # Build Options
 ###########################################################
+include(CMakeDependentOption)
+option(QE_ENABLE_OPENACC
+    "enable OpenACC acceleration" OFF)
 option(QE_ENABLE_CUDA
     "enable CUDA acceleration on NVIDIA GPUs" OFF)
 if(QE_ENABLE_CUDA)
@@ -78,12 +81,16 @@ else()
 endif()
 option(QE_ENABLE_MPI
     "enable distributed execution support via MPI" ON)
+option(QE_ENABLE_MPI_GPU_AWARE
+    "enable GPU aware MPI operations" OFF)
 option(QE_ENABLE_TEST
     "enable unit and system tests" ON)
+cmake_dependent_option(QE_ENABLE_BENCHMARK
+    "enable benchmark tests" OFF "QE_ENABLE_TEST" OFF)
 option(QE_ENABLE_TRACE
     "enable execution tracing output" OFF)
 option(QE_ENABLE_PROFILE_NVTX
-        "enable execution of NVidia profiler plugin" OFF) 
+        "enable execution of NVIDIA NVTX profiler plugin" OFF)
 option(QE_ENABLE_MPI_INPLACE
     "enable inplace MPI calls (ignored when QE_ENABLE_MPI=OFF)" OFF)
 option(QE_ENABLE_MPI_MODULE
@@ -100,9 +107,11 @@ option(QE_ENABLE_LIBXC
     "enable LIBXC execution units" OFF)
 option(QE_ENABLE_HDF5
     "enable HDF5 data collection" OFF)
+option(QE_ENABLE_STATIC_BUILD
+    "enable fully static build of executables" OFF)
 option(QE_ENABLE_DOC
     "enable documentation building" OFF)
-set(QE_FFTW_VENDOR "AUTO" CACHE 
+set(QE_FFTW_VENDOR "AUTO" CACHE
     STRING "select a specific FFTW library [Intel_DFTI, Intel_FFTW3, ArmPL, IBMESSL, FFTW3, Internal]")
 set(QE_ENABLE_SANITIZER "none" CACHE STRING "none,asan,ubsan,tsan,msan")
 
@@ -138,6 +147,9 @@ endif()
 if(QE_ENABLE_MPI)
     # OMPI_SKIP_MPICXX: skip CXX APIs on openmpi, cause trouble to C APIs
     qe_add_global_compile_definitions(__MPI OMPI_SKIP_MPICXX)
+    if(QE_ENABLE_MPI_GPU_AWARE)
+        qe_add_global_compile_definitions(__GPU_MPI)
+    endif()
 endif()
 if(QE_ENABLE_SCALAPACK)
     qe_add_global_compile_definitions(__SCALAPACK)
@@ -153,6 +165,9 @@ if(HAVE_MALLINFO)
 endif()
 
 # Check options consistency
+if(QE_ENABLE_STATIC_BUILD AND BUILD_SHARED_LIBS)
+    message(FATAL_ERROR "Full static build of QE executables requires static QE internal libraries. QE_ENABLE_STATIC_BUILD and BUILD_SHARED_LIBS cannot be both ON")
+endif()
 if(QE_ENABLE_ELPA AND NOT QE_ENABLE_SCALAPACK)
     message(FATAL_ERROR "ELPA requires SCALAPACK support, enable it with '-DQE_ENABLE_SCALAPACK=ON' or disable ELPA with '-DQE_ENABLE_ELPA=OFF'")
 endif()
@@ -160,7 +175,13 @@ if(QE_ENABLE_SCALAPACK AND NOT QE_ENABLE_MPI)
     message(FATAL_ERROR "SCALAPACK requires MPI support, enable it with '-DQE_ENABLE_MPI=ON' or disable SCALAPACK with '-DQE_ENABLE_SCALAPACK=OFF'")
 endif()
 if(QE_ENABLE_CUDA AND NOT (CMAKE_Fortran_COMPILER_ID MATCHES "PGI" OR CMAKE_Fortran_COMPILER_ID MATCHES "NVHPC"))
-    message(FATAL_ERROR "PGI compiler is mandatory when CUDA is enable due QE is based on CUDA Fortran language")
+    message(FATAL_ERROR "NVHPC compiler is mandatory when CUDA is enabled due QE is based on CUDA Fortran language")
+endif()
+if(QE_ENABLE_OPENACC AND NOT (CMAKE_Fortran_COMPILER_ID MATCHES "PGI" OR CMAKE_Fortran_COMPILER_ID MATCHES "NVHPC"))
+    message(FATAL_ERROR "NVHPC compiler is mandatory when OpenACC is enabled")
+endif()
+if(QE_ENABLE_MPI_GPU_AWARE AND NOT (QE_ENABLE_CUDA AND QE_ENABLE_MPI))
+    message(FATAL_ERROR "GPU aware MPI requires both MPI and CUDA features enabled")
 endif()
 if(QE_ENABLE_LAXLIB_CUSOLVER AND (NOT QE_ENABLE_CUDA))
     message(FATAL_ERROR "CUDA Solver for LAXLib requires CUDA support, enable it with '-DQE_ENABLE_CUDA=ON' or disable CUDA Solver for LAXLib with '-DQE_ENABLE_LAXLIB_CUSOLVER=OFF'")
@@ -194,7 +215,28 @@ if(CMAKE_Fortran_COMPILER_ID MATCHES "PGI" OR CMAKE_Fortran_COMPILER_ID MATCHES
 endif()
 
 ############################################################
-## Compiler vendor specific options
+# C preprocessor
+# Note: reply on the compiler preprocessor whenever possible
+############################################################
+if(DEFINED ENV{CPP})
+    set(QE_CPP_DEFAULT $ENV{CPP})
+else()
+    set(QE_CPP_DEFAULT cpp)
+endif()
+# QE_CPP_DEFAULT is only effective when cached QE_CPP doesn't exist.
+set(QE_CPP ${QE_CPP_DEFAULT} CACHE
+    STRING "C preprocessor for qe_preprocess_source in qeHelpers.cmake")
+find_program(QE_CPP_FULL_PATH NAMES ${QE_CPP} DOC "C preprocessor full path")
+if(QE_CPP_FULL_PATH)
+    message(STATUS "C preprocessor used by qe_preprocess_source in qeHelpers.cmake: ${QE_CPP_FULL_PATH}")
+else()
+    set(QE_CPP_SAVED ${QE_CPP})
+    unset(QE_CPP CACHE)
+    message(FATAL_ERROR "C preprocessor ${QE_CPP_SAVED} not found. Pass a working one to CMake via QE_CPP!")
+endif()
+
+############################################################
+# Compiler vendor specific options
 ############################################################
 if(CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
     include(${PROJECT_CMAKE}/GNUFortranCompiler.cmake)
@@ -204,21 +246,36 @@ elseif(CMAKE_Fortran_COMPILER_ID MATCHES "XL")
     include(${PROJECT_CMAKE}/IBMFortranCompiler.cmake)
 endif()
 
+if(QE_ENABLE_STATIC_BUILD)
+    set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static")
+endif()
+
 ###########################################################
 # CUDA
 ###########################################################
 if(QE_ENABLE_CUDA OR QE_ENABLE_PROFILE_NVTX)
     if(CMAKE_Fortran_COMPILER_ID MATCHES "PGI" OR CMAKE_Fortran_COMPILER_ID MATCHES "NVHPC")
-      add_library(CUDA::cufft INTERFACE IMPORTED)
-      set_target_properties(CUDA::cufft PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=cufft")
-      add_library(CUDA::cublas INTERFACE IMPORTED)
-      set_target_properties(CUDA::cublas PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=cublas")
-      add_library(CUDA::cusolver INTERFACE IMPORTED)
-      set_target_properties(CUDA::cusolver PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=cusolver")
-      add_library(CUDA::curand INTERFACE IMPORTED)
-      set_target_properties(CUDA::curand PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=curand")
+        add_library(CUDA::cufft INTERFACE IMPORTED)
+        set_target_properties(CUDA::cufft PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=cufft")
+        add_library(CUDA::cublas INTERFACE IMPORTED)
+        set_target_properties(CUDA::cublas PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=cublas")
+        add_library(CUDA::cusolver INTERFACE IMPORTED)
+        set_target_properties(CUDA::cusolver PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=cusolver")
+        add_library(CUDA::curand INTERFACE IMPORTED)
+        set_target_properties(CUDA::curand PROPERTIES INTERFACE_LINK_LIBRARIES "${CUDA_FLAG}lib=curand")
+        if(QE_ENABLE_PROFILE_NVTX)
+            add_library(CUDA::nvToolsExt INTERFACE IMPORTED)
+            set_target_properties(CUDA::nvToolsExt PROPERTIES INTERFACE_LINK_LIBRARIES "-cuda;libnvToolsExt.so")
+            set(CMAKE_REQUIRED_LIBRARIES "-cuda;libnvToolsExt.so")
+            check_function_exists(nvtxRangePushEx NVTX_FOUND)
+            unset(CMAKE_REQUIRED_LIBRARIES)
+            if(NOT NVTX_FOUND)
+                message(FATAL_ERROR "Check nvtxRangePushEx in libnvToolsExt.so failed")
+            endif()
+        endif()
     else()
-      find_package(CUDAToolkit REQUIRED)
+        find_package(CUDAToolkit REQUIRED)
     endif()
 endif(QE_ENABLE_CUDA OR QE_ENABLE_PROFILE_NVTX)
 
@@ -237,6 +294,17 @@ if(QE_ENABLE_OPENMP)
         INTERFACE OpenMP::OpenMP_C)
 endif(QE_ENABLE_OPENMP)
 
+###########################################################
+# OpenACC
+# The following targets will be defined:
+add_library(qe_openacc_fortran INTERFACE)
+qe_install_targets(qe_openacc_fortran)
+###########################################################
+if(QE_ENABLE_OPENACC)
+    target_link_libraries(qe_openacc_fortran
+        INTERFACE OpenACC::OpenACC_Fortran)
+endif(QE_ENABLE_OPENACC)
+
 ###########################################################
 # MPI
 # The following targets will be defined:
@@ -298,10 +366,18 @@ if(NOT QE_LAPACK_INTERNAL)
         if(NOT LAPACK_FOUND)
             message(STATUS "Trying to find alternative LAPACK libraries")
             SET(BLA_VENDOR All)
+            if(QE_ENABLE_OPENMP)
+                set(CMAKE_REQUIRED_LINK_OPTIONS ${OpenMP_Fortran_FLAGS})
+            endif()
             find_package(LAPACK)
+            unset(CMAKE_REQUIRED_LINK_OPTIONS)
         endif()
     else()
+        if(QE_ENABLE_OPENMP)
+            set(CMAKE_REQUIRED_LINK_OPTIONS ${OpenMP_Fortran_FLAGS})
+        endif()
         find_package(LAPACK)
+        unset(CMAKE_REQUIRED_LINK_OPTIONS)
     endif()
     if(LAPACK_FOUND)
         list(APPEND _lapack_libs
@@ -309,11 +385,15 @@ if(NOT QE_LAPACK_INTERNAL)
             ${BLAS_LINKER_FLAGS}
             ${LAPACK_LIBRARIES}
             ${LAPACK_LINKER_FLAGS})
+        if(QE_ENABLE_OPENMP)
+            list(APPEND _lapack_libs ${OpenMP_Fortran_LIBRARIES})
+        endif()
         list(REMOVE_DUPLICATES "${_lapack_libs}")
         message(STATUS "Found LAPACK: ${_lapack_libs}")
         target_link_libraries(qe_lapack INTERFACE ${_lapack_libs})
         set(CMAKE_REQUIRED_LIBRARIES ${_lapack_libs})
         check_fortran_function_exists(zhpev ZHPEV_FOUND)
+        unset(CMAKE_REQUIRED_LIBRARIES)
         if(NOT ZHPEV_FOUND)
           unset(ZHPEV_FOUND CACHE)
           message(FATAL_ERROR "Incomplete LAPACK! function zhpev not found!")
@@ -426,24 +506,14 @@ endif(QE_ENABLE_LIBXC)
 add_library(qe_hdf5_fortran INTERFACE)
 add_library(qe_hdf5_c INTERFACE)
 qe_install_targets(qe_hdf5_fortran qe_hdf5_c)
-###########################################################
-# PROFILERS LIBRARIES
-# the target for profiler libray will be defined if
-# some profiler is enabled
-add_library(qe_ext_prof_tool INTERFACE)
-qe_install_targets(qe_ext_prof_tool) 
-###########################################################
-# this should work with nvfortran 
-if(QE_ENABLE_PROFILE_NVTX)
-   target_link_libraries(qe_ext_prof_tool
-	INTERFACE
-        CUDA::nvToolsExt)
-endif(QE_ENABLE_PROFILE_NVTX)
 ########################################################### 
 if(QE_ENABLE_HDF5)
     if(QE_ENABLE_MPI)
         option(HDF5_PREFER_PARALLEL "Prefer parallel HDF5" ON)
     endif()
+    if(QE_ENABLE_STATIC_BUILD)
+        set(HDF5_USE_STATIC_LIBRARIES TRUE)
+    endif()
     find_package(HDF5 REQUIRED Fortran C)
     if(NOT HDF5_FOUND)
         message(FATAL_ERROR "HDF5 Fortran interface has not been found!")
@@ -489,6 +559,20 @@ if(QE_ENABLE_TEST)
     enable_testing()
 endif(QE_ENABLE_TEST)
 
+###########################################################
+# PROFILERS LIBRARIES
+# the target for profiler libray will be defined if
+# some profiler is enabled
+add_library(qe_ext_prof_tool INTERFACE)
+qe_install_targets(qe_ext_prof_tool)
+###########################################################
+# this should work with nvfortran
+if(QE_ENABLE_PROFILE_NVTX)
+   target_link_libraries(qe_ext_prof_tool
+	INTERFACE
+        CUDA::nvToolsExt)
+endif(QE_ENABLE_PROFILE_NVTX)
+
 ###########################################################
 # Components
 ###########################################################
@@ -509,13 +593,12 @@ add_subdirectory(COUPLE)
 add_subdirectory(LR_Modules)
 add_subdirectory(PHonon)
 add_subdirectory(PP)
+add_subdirectory(D3Q)
 add_subdirectory(EPW)
 add_subdirectory(GWW)
 add_subdirectory(HP)
 add_subdirectory(NEB)
-add_subdirectory(PlotPhon)
 add_subdirectory(PWCOND)
-add_subdirectory(QHA)
 add_subdirectory(TDDFPT)
 add_subdirectory(XSpectra)
 add_subdirectory(QEHeat)
@@ -527,6 +610,7 @@ endif()
 # Tests
 ###########################################################
 if(QE_ENABLE_TEST)
+  message(STATUS "Enabling tests in test-suite")
   add_subdirectory(test-suite)
 endif()
 
@@ -602,9 +686,6 @@ add_custom_target(ph
         qe_phonon_fdef_exe
         qe_phonon_fdifc_exe
         qe_phonon_postahc_exe
-        qe_plotphon_kforbands_exe
-        qe_plotphon_bandstognuplot_exe
-        qe_plotphon_eminmax_exe
     COMMENT
         "phonon code, Gamma-only and third-order derivatives")
 
@@ -640,7 +721,6 @@ add_custom_target(pp
         qe_pp_plotproj_exe
         qe_pp_plotrho_exe
         qe_pp_pmw_exe
-        qe_pp_xctest_exe
         qe_pp_projwfc_exe
         qe_pp_pw2wannier90_exe
         qe_pp_pw2critic_exe
@@ -738,6 +818,14 @@ add_custom_target(epw
         qe_epw_exe
     COMMENT
         "electron-Phonon Coupling with wannier functions")
+
+add_custom_target(d3q
+    DEPENDS
+        qe_d3q_exe
+        qe_d3_thermal2
+    COMMENT
+        "anharmonic")
+
 add_custom_target(all_currents
     DEPENDS
 	qe_qeheat_exe
diff --git a/LR_Modules/dynmat_sub.f90 b/LR_Modules/dynmat_sub.f90
index 38f842ee3..f0d6dda9e 100644
--- a/LR_Modules/dynmat_sub.f90
+++ b/LR_Modules/dynmat_sub.f90
@@ -38,6 +38,7 @@ subroutine readmat2 ( fildyn, asr, axis, nat, ntyp, atm, &
   real(DP) :: celldm(6), dyn0r(3,3,2)
   integer :: ibrav, nt, na, nb, naa, nbb, i, j, k, ios
   logical :: qfinito, noraman
+  logical, external :: matches
   !
   !
   noraman=.true.
@@ -118,7 +119,7 @@ subroutine readmat2 ( fildyn, asr, axis, nat, ntyp, atm, &
         end do
         write(6,'(5x,a)') '...epsilon and Z* read'
  20    read(1,'(a)',end=10,err=10) line
-       if (line(1:10) == '     Raman') go to 25
+       if (matches("Raman",line)) go to 25
        go to 20
  25    read(1,*,end=10,err=10)
        do na = 1,nat
@@ -167,6 +168,7 @@ subroutine RamanIR (nat, omega, w2, z, zstar, eps0, dchi_dtau)
  real(DP), allocatable :: infrared(:), raman(:,:,:)
  real(DP):: polar(3), cm1thz, freq, irfac
  real(DP):: cmfac, alpha, beta2
+ logical, external :: matches
  !
  !
  cm1thz = RY_TO_THZ/RY_TO_CMM1
diff --git a/external/fox b/external/fox
index 98ce8e36c..819745f58 160000
--- a/external/fox
+++ b/external/fox
@@ -1 +1 @@
-Subproject commit 98ce8e36c881ccf511c1c4991ff76c174eaaeab9
+Subproject commit 819745f5849de5c9de516be133ab206691738257
